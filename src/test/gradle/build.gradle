buildscript {
  dependencies {
    classpath fileTree('../../../build/libs')
  }
}

apply plugin: 'java'
apply plugin: 'us.kirchmeier.capsule'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
}

dependencies {
  compile files('settings.gradle')
  compile('org.apache.ant:ant:1.9.3') {
    exclude module: 'ant-launcher'
  }
  runtime 'junit:junit:4.11'

  // I have no idea what these are,
  // but they exercise the name collision bug
  runtime 'com.sefford:commons:1.0.0', { exclude group: '*' }
  runtime 'com.github.penggle:commons:1.0.0', { exclude group: '*' }
}

jar {
  baseName 'test-project'
}

project('subproject') {
  apply plugin: 'us.kirchmeier.capsule'

  repositories {
    jcenter()
  }

  dependencies {
    compile project.parent
  }
}

task fatCapsule(type: FatCapsule) {
  applicationClass 'com.foo.Main'
}
task fatCapsuleExecutable(type: FatCapsule) {
  applicationClass 'com.foo.Main'
  reallyExecutable
}

task mavenCapsule(type: MavenCapsule) {
  applicationClass 'com.foo.Main'
}
task mavenCapsuleExecutable(type: MavenCapsule) {
  applicationClass 'com.foo.Main'
  reallyExecutable { trampolining() }
}

task platformCapsule(type: FatCapsule) {
  capsuleManifest {
    platform('macos') { applicationClass 'com.foo.Main' }
    platform('windows') { applicationClass 'com.foo.Main' }
    platform('linux') { applicationClass 'com.foo.Main' }
  }
}

task recreatedMavenCapsule(type: Capsule){
  applicationClass 'com.foo.Main'
  applicationSource jar
  capletConfiguration configurations.mavenCaplet
  capsuleManifest{
    dependencyConfiguration configurations.runtime
    caplets << 'MavenCapsule'
  }
}

task customExecutableScript(type: FatCapsule){
  applicationClass 'com.foo.Main'
  reallyExecutable { script(file('really-executable.sh')) }
}

project('subproject') {
  task fatCapsuleInSubproject(type: FatCapsule){
    applicationClass 'com.foo.Main'
    manifest { //Tests issue #13, where this broke subprojects
      attributes('Main-Class': 'Capsule')
    }
  }
}

task runScript() {
  if(!project.hasProperty('testScript')) throw new Exception("Missing -PtestScript=...")
  evaluate(new File(project.property('testScript')))
}

def buildAllTask = task('buildAll')
allprojects.each {
  it.tasks.withType(Capsule).each {
    buildAllTask.dependsOn.add(it)

    it.destinationDir = file("${project.buildDir}/capsules")
    it.archiveName = "${it.name}.jar"
  }
}
